// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"context"
	"sync"

	"github.com/DueIt-Jasanya-Aturuang/one-piece/domain"
)

type FakePaymentUsecase struct {
	CreatePaymentStub        func(context.Context, *domain.RequestCreatePayment) (*domain.ResponsePayment, error)
	createPaymentMutex       sync.RWMutex
	createPaymentArgsForCall []struct {
		arg1 context.Context
		arg2 *domain.RequestCreatePayment
	}
	createPaymentReturns struct {
		result1 *domain.ResponsePayment
		result2 error
	}
	createPaymentReturnsOnCall map[int]struct {
		result1 *domain.ResponsePayment
		result2 error
	}
	GetAllPaymentStub        func(context.Context) (*[]domain.ResponsePayment, error)
	getAllPaymentMutex       sync.RWMutex
	getAllPaymentArgsForCall []struct {
		arg1 context.Context
	}
	getAllPaymentReturns struct {
		result1 *[]domain.ResponsePayment
		result2 error
	}
	getAllPaymentReturnsOnCall map[int]struct {
		result1 *[]domain.ResponsePayment
		result2 error
	}
	UpdatePaymentStub        func(context.Context, *domain.RequestUpdatePayment) (*domain.ResponsePayment, error)
	updatePaymentMutex       sync.RWMutex
	updatePaymentArgsForCall []struct {
		arg1 context.Context
		arg2 *domain.RequestUpdatePayment
	}
	updatePaymentReturns struct {
		result1 *domain.ResponsePayment
		result2 error
	}
	updatePaymentReturnsOnCall map[int]struct {
		result1 *domain.ResponsePayment
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakePaymentUsecase) CreatePayment(arg1 context.Context, arg2 *domain.RequestCreatePayment) (*domain.ResponsePayment, error) {
	fake.createPaymentMutex.Lock()
	ret, specificReturn := fake.createPaymentReturnsOnCall[len(fake.createPaymentArgsForCall)]
	fake.createPaymentArgsForCall = append(fake.createPaymentArgsForCall, struct {
		arg1 context.Context
		arg2 *domain.RequestCreatePayment
	}{arg1, arg2})
	stub := fake.CreatePaymentStub
	fakeReturns := fake.createPaymentReturns
	fake.recordInvocation("CreatePayment", []interface{}{arg1, arg2})
	fake.createPaymentMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakePaymentUsecase) CreatePaymentCallCount() int {
	fake.createPaymentMutex.RLock()
	defer fake.createPaymentMutex.RUnlock()
	return len(fake.createPaymentArgsForCall)
}

func (fake *FakePaymentUsecase) CreatePaymentCalls(stub func(context.Context, *domain.RequestCreatePayment) (*domain.ResponsePayment, error)) {
	fake.createPaymentMutex.Lock()
	defer fake.createPaymentMutex.Unlock()
	fake.CreatePaymentStub = stub
}

func (fake *FakePaymentUsecase) CreatePaymentArgsForCall(i int) (context.Context, *domain.RequestCreatePayment) {
	fake.createPaymentMutex.RLock()
	defer fake.createPaymentMutex.RUnlock()
	argsForCall := fake.createPaymentArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakePaymentUsecase) CreatePaymentReturns(result1 *domain.ResponsePayment, result2 error) {
	fake.createPaymentMutex.Lock()
	defer fake.createPaymentMutex.Unlock()
	fake.CreatePaymentStub = nil
	fake.createPaymentReturns = struct {
		result1 *domain.ResponsePayment
		result2 error
	}{result1, result2}
}

func (fake *FakePaymentUsecase) CreatePaymentReturnsOnCall(i int, result1 *domain.ResponsePayment, result2 error) {
	fake.createPaymentMutex.Lock()
	defer fake.createPaymentMutex.Unlock()
	fake.CreatePaymentStub = nil
	if fake.createPaymentReturnsOnCall == nil {
		fake.createPaymentReturnsOnCall = make(map[int]struct {
			result1 *domain.ResponsePayment
			result2 error
		})
	}
	fake.createPaymentReturnsOnCall[i] = struct {
		result1 *domain.ResponsePayment
		result2 error
	}{result1, result2}
}

func (fake *FakePaymentUsecase) GetAllPayment(arg1 context.Context) (*[]domain.ResponsePayment, error) {
	fake.getAllPaymentMutex.Lock()
	ret, specificReturn := fake.getAllPaymentReturnsOnCall[len(fake.getAllPaymentArgsForCall)]
	fake.getAllPaymentArgsForCall = append(fake.getAllPaymentArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.GetAllPaymentStub
	fakeReturns := fake.getAllPaymentReturns
	fake.recordInvocation("GetAllPayment", []interface{}{arg1})
	fake.getAllPaymentMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakePaymentUsecase) GetAllPaymentCallCount() int {
	fake.getAllPaymentMutex.RLock()
	defer fake.getAllPaymentMutex.RUnlock()
	return len(fake.getAllPaymentArgsForCall)
}

func (fake *FakePaymentUsecase) GetAllPaymentCalls(stub func(context.Context) (*[]domain.ResponsePayment, error)) {
	fake.getAllPaymentMutex.Lock()
	defer fake.getAllPaymentMutex.Unlock()
	fake.GetAllPaymentStub = stub
}

func (fake *FakePaymentUsecase) GetAllPaymentArgsForCall(i int) context.Context {
	fake.getAllPaymentMutex.RLock()
	defer fake.getAllPaymentMutex.RUnlock()
	argsForCall := fake.getAllPaymentArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakePaymentUsecase) GetAllPaymentReturns(result1 *[]domain.ResponsePayment, result2 error) {
	fake.getAllPaymentMutex.Lock()
	defer fake.getAllPaymentMutex.Unlock()
	fake.GetAllPaymentStub = nil
	fake.getAllPaymentReturns = struct {
		result1 *[]domain.ResponsePayment
		result2 error
	}{result1, result2}
}

func (fake *FakePaymentUsecase) GetAllPaymentReturnsOnCall(i int, result1 *[]domain.ResponsePayment, result2 error) {
	fake.getAllPaymentMutex.Lock()
	defer fake.getAllPaymentMutex.Unlock()
	fake.GetAllPaymentStub = nil
	if fake.getAllPaymentReturnsOnCall == nil {
		fake.getAllPaymentReturnsOnCall = make(map[int]struct {
			result1 *[]domain.ResponsePayment
			result2 error
		})
	}
	fake.getAllPaymentReturnsOnCall[i] = struct {
		result1 *[]domain.ResponsePayment
		result2 error
	}{result1, result2}
}

func (fake *FakePaymentUsecase) UpdatePayment(arg1 context.Context, arg2 *domain.RequestUpdatePayment) (*domain.ResponsePayment, error) {
	fake.updatePaymentMutex.Lock()
	ret, specificReturn := fake.updatePaymentReturnsOnCall[len(fake.updatePaymentArgsForCall)]
	fake.updatePaymentArgsForCall = append(fake.updatePaymentArgsForCall, struct {
		arg1 context.Context
		arg2 *domain.RequestUpdatePayment
	}{arg1, arg2})
	stub := fake.UpdatePaymentStub
	fakeReturns := fake.updatePaymentReturns
	fake.recordInvocation("UpdatePayment", []interface{}{arg1, arg2})
	fake.updatePaymentMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakePaymentUsecase) UpdatePaymentCallCount() int {
	fake.updatePaymentMutex.RLock()
	defer fake.updatePaymentMutex.RUnlock()
	return len(fake.updatePaymentArgsForCall)
}

func (fake *FakePaymentUsecase) UpdatePaymentCalls(stub func(context.Context, *domain.RequestUpdatePayment) (*domain.ResponsePayment, error)) {
	fake.updatePaymentMutex.Lock()
	defer fake.updatePaymentMutex.Unlock()
	fake.UpdatePaymentStub = stub
}

func (fake *FakePaymentUsecase) UpdatePaymentArgsForCall(i int) (context.Context, *domain.RequestUpdatePayment) {
	fake.updatePaymentMutex.RLock()
	defer fake.updatePaymentMutex.RUnlock()
	argsForCall := fake.updatePaymentArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakePaymentUsecase) UpdatePaymentReturns(result1 *domain.ResponsePayment, result2 error) {
	fake.updatePaymentMutex.Lock()
	defer fake.updatePaymentMutex.Unlock()
	fake.UpdatePaymentStub = nil
	fake.updatePaymentReturns = struct {
		result1 *domain.ResponsePayment
		result2 error
	}{result1, result2}
}

func (fake *FakePaymentUsecase) UpdatePaymentReturnsOnCall(i int, result1 *domain.ResponsePayment, result2 error) {
	fake.updatePaymentMutex.Lock()
	defer fake.updatePaymentMutex.Unlock()
	fake.UpdatePaymentStub = nil
	if fake.updatePaymentReturnsOnCall == nil {
		fake.updatePaymentReturnsOnCall = make(map[int]struct {
			result1 *domain.ResponsePayment
			result2 error
		})
	}
	fake.updatePaymentReturnsOnCall[i] = struct {
		result1 *domain.ResponsePayment
		result2 error
	}{result1, result2}
}

func (fake *FakePaymentUsecase) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createPaymentMutex.RLock()
	defer fake.createPaymentMutex.RUnlock()
	fake.getAllPaymentMutex.RLock()
	defer fake.getAllPaymentMutex.RUnlock()
	fake.updatePaymentMutex.RLock()
	defer fake.updatePaymentMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakePaymentUsecase) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ domain.PaymentUsecase = new(FakePaymentUsecase)
