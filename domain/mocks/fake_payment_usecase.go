// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"context"
	"sync"

	"github.com/DueIt-Jasanya-Aturuang/one-piece/domain"
)

type FakePaymentUsecase struct {
	CreateStub        func(context.Context, *domain.RequestCreatePayment) (*domain.ResponsePayment, error)
	createMutex       sync.RWMutex
	createArgsForCall []struct {
		arg1 context.Context
		arg2 *domain.RequestCreatePayment
	}
	createReturns struct {
		result1 *domain.ResponsePayment
		result2 error
	}
	createReturnsOnCall map[int]struct {
		result1 *domain.ResponsePayment
		result2 error
	}
	GetAllStub        func(context.Context) (*[]domain.ResponsePayment, error)
	getAllMutex       sync.RWMutex
	getAllArgsForCall []struct {
		arg1 context.Context
	}
	getAllReturns struct {
		result1 *[]domain.ResponsePayment
		result2 error
	}
	getAllReturnsOnCall map[int]struct {
		result1 *[]domain.ResponsePayment
		result2 error
	}
	UpdateStub        func(context.Context, *domain.RequestUpdatePayment) (*domain.ResponsePayment, error)
	updateMutex       sync.RWMutex
	updateArgsForCall []struct {
		arg1 context.Context
		arg2 *domain.RequestUpdatePayment
	}
	updateReturns struct {
		result1 *domain.ResponsePayment
		result2 error
	}
	updateReturnsOnCall map[int]struct {
		result1 *domain.ResponsePayment
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakePaymentUsecase) Create(arg1 context.Context, arg2 *domain.RequestCreatePayment) (*domain.ResponsePayment, error) {
	fake.createMutex.Lock()
	ret, specificReturn := fake.createReturnsOnCall[len(fake.createArgsForCall)]
	fake.createArgsForCall = append(fake.createArgsForCall, struct {
		arg1 context.Context
		arg2 *domain.RequestCreatePayment
	}{arg1, arg2})
	stub := fake.CreateStub
	fakeReturns := fake.createReturns
	fake.recordInvocation("Create", []interface{}{arg1, arg2})
	fake.createMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakePaymentUsecase) CreateCallCount() int {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return len(fake.createArgsForCall)
}

func (fake *FakePaymentUsecase) CreateCalls(stub func(context.Context, *domain.RequestCreatePayment) (*domain.ResponsePayment, error)) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = stub
}

func (fake *FakePaymentUsecase) CreateArgsForCall(i int) (context.Context, *domain.RequestCreatePayment) {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	argsForCall := fake.createArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakePaymentUsecase) CreateReturns(result1 *domain.ResponsePayment, result2 error) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = nil
	fake.createReturns = struct {
		result1 *domain.ResponsePayment
		result2 error
	}{result1, result2}
}

func (fake *FakePaymentUsecase) CreateReturnsOnCall(i int, result1 *domain.ResponsePayment, result2 error) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = nil
	if fake.createReturnsOnCall == nil {
		fake.createReturnsOnCall = make(map[int]struct {
			result1 *domain.ResponsePayment
			result2 error
		})
	}
	fake.createReturnsOnCall[i] = struct {
		result1 *domain.ResponsePayment
		result2 error
	}{result1, result2}
}

func (fake *FakePaymentUsecase) GetAll(arg1 context.Context) (*[]domain.ResponsePayment, error) {
	fake.getAllMutex.Lock()
	ret, specificReturn := fake.getAllReturnsOnCall[len(fake.getAllArgsForCall)]
	fake.getAllArgsForCall = append(fake.getAllArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.GetAllStub
	fakeReturns := fake.getAllReturns
	fake.recordInvocation("GetAllByProfileID", []interface{}{arg1})
	fake.getAllMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakePaymentUsecase) GetAllCallCount() int {
	fake.getAllMutex.RLock()
	defer fake.getAllMutex.RUnlock()
	return len(fake.getAllArgsForCall)
}

func (fake *FakePaymentUsecase) GetAllCalls(stub func(context.Context) (*[]domain.ResponsePayment, error)) {
	fake.getAllMutex.Lock()
	defer fake.getAllMutex.Unlock()
	fake.GetAllStub = stub
}

func (fake *FakePaymentUsecase) GetAllArgsForCall(i int) context.Context {
	fake.getAllMutex.RLock()
	defer fake.getAllMutex.RUnlock()
	argsForCall := fake.getAllArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakePaymentUsecase) GetAllReturns(result1 *[]domain.ResponsePayment, result2 error) {
	fake.getAllMutex.Lock()
	defer fake.getAllMutex.Unlock()
	fake.GetAllStub = nil
	fake.getAllReturns = struct {
		result1 *[]domain.ResponsePayment
		result2 error
	}{result1, result2}
}

func (fake *FakePaymentUsecase) GetAllReturnsOnCall(i int, result1 *[]domain.ResponsePayment, result2 error) {
	fake.getAllMutex.Lock()
	defer fake.getAllMutex.Unlock()
	fake.GetAllStub = nil
	if fake.getAllReturnsOnCall == nil {
		fake.getAllReturnsOnCall = make(map[int]struct {
			result1 *[]domain.ResponsePayment
			result2 error
		})
	}
	fake.getAllReturnsOnCall[i] = struct {
		result1 *[]domain.ResponsePayment
		result2 error
	}{result1, result2}
}

func (fake *FakePaymentUsecase) Update(arg1 context.Context, arg2 *domain.RequestUpdatePayment) (*domain.ResponsePayment, error) {
	fake.updateMutex.Lock()
	ret, specificReturn := fake.updateReturnsOnCall[len(fake.updateArgsForCall)]
	fake.updateArgsForCall = append(fake.updateArgsForCall, struct {
		arg1 context.Context
		arg2 *domain.RequestUpdatePayment
	}{arg1, arg2})
	stub := fake.UpdateStub
	fakeReturns := fake.updateReturns
	fake.recordInvocation("Update", []interface{}{arg1, arg2})
	fake.updateMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakePaymentUsecase) UpdateCallCount() int {
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	return len(fake.updateArgsForCall)
}

func (fake *FakePaymentUsecase) UpdateCalls(stub func(context.Context, *domain.RequestUpdatePayment) (*domain.ResponsePayment, error)) {
	fake.updateMutex.Lock()
	defer fake.updateMutex.Unlock()
	fake.UpdateStub = stub
}

func (fake *FakePaymentUsecase) UpdateArgsForCall(i int) (context.Context, *domain.RequestUpdatePayment) {
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	argsForCall := fake.updateArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakePaymentUsecase) UpdateReturns(result1 *domain.ResponsePayment, result2 error) {
	fake.updateMutex.Lock()
	defer fake.updateMutex.Unlock()
	fake.UpdateStub = nil
	fake.updateReturns = struct {
		result1 *domain.ResponsePayment
		result2 error
	}{result1, result2}
}

func (fake *FakePaymentUsecase) UpdateReturnsOnCall(i int, result1 *domain.ResponsePayment, result2 error) {
	fake.updateMutex.Lock()
	defer fake.updateMutex.Unlock()
	fake.UpdateStub = nil
	if fake.updateReturnsOnCall == nil {
		fake.updateReturnsOnCall = make(map[int]struct {
			result1 *domain.ResponsePayment
			result2 error
		})
	}
	fake.updateReturnsOnCall[i] = struct {
		result1 *domain.ResponsePayment
		result2 error
	}{result1, result2}
}

func (fake *FakePaymentUsecase) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	fake.getAllMutex.RLock()
	defer fake.getAllMutex.RUnlock()
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakePaymentUsecase) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ domain.PaymentUsecase = new(FakePaymentUsecase)
